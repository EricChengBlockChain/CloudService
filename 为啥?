1、如果需要对企业内部各种 IT 资源进行服务化，那就需要有一个独立的用户/租户体系，这个用户/租户体系需要超越任何 IT 资源自带的用户/租户体系。
2、企业 IT 内部的资源形态非常多样化，有云主机这样的计算资源，也有块存储、对象存储和文件存储，还有备份、监控、安全等运维管理能力。每种 IT 产品及能力因为其定位不同，使用场景不同，其生命周期管理模式也不同。
3、企业内部的 IT 异构主要来自于两个方面，一是企业 IT 的演化和迭代是一个长期的过程，这就意味着不同阶段的 IT 产品及能力会长时间共存。最为典型的代表就是很多企业内部 IT 计算资源会同时存在有大型机、小型机、x86 服务器、x86 虚拟化、IaaS 乃至容器云等。因为这个原因，绑定一种 IT 产品及能力的云管平台很难承担起整个企业 IT 能力云化/服务化的使命。


open stack
Cloud Infrastructure for Virtual Machines, Bare Metal, and Containers
Openstack controls large pools of compute, storage, and networking resources, all managed through APIs or a dashboard.

Beyond standard infrastructure-as-a-service functionality, additional components provide orchestration, 
fault management and service management amongst other services to ensure high availability of user applications.

多云指同一种基础架构，多套平台或多个账号，如Openstack部署了4套，或者阿里云平台同时有10个云账号等；
混合云指不同的云厂商提供的不同的基础混合云架构，如某证券公司同时使用了VMware虚拟化平台、openstack私有云平台两种架构的资源；
资源池标签用来定义资源池的类型，可以从多个角度定义，如基于环境维度：开发、测试、生产、预生产等；或者基于性能维度：高性能、标准性能、超高性能存储等；或者基于业务场景划分：交易环境资源、非交易环境资源等；
基础架构平台:指为业务系统开发测试、运行提供运行环境资源的各类虚拟化平台、超融合平台、私有云平台以及公有云平台。
部署在企业内部仅供企业内部使用的云平台。私有云平台
公有云平台          	
部署在云服务提供商数据中心，为市场公众企业客户提供服务被多个企业客户共享使用的云平台。
运维支撑工具	指运维工作中帮助运维的各种运维工具平台，如CMDB、ITSM、监控平台、自动化作业工具、备份工具、漏洞扫描工具等等。
安全组是一种虚拟防火墙，具备有状态的数据包过滤功能，用于设置云服务器、负载均衡、云数据库等实例的网络访问控制，控制实例级别的出入流量，是重要的网络安全隔离手段。可以通过配置安全组规则，允许或禁止安全组内的实例的出流量和入流量。
弹性IP	是私有云、公有云中租户能够申请获取保留专用的公网IP地址。在私有云、公有云中，如果指定给虚拟机分配公网IP，虚拟机停止后再启动会自动分配一个新的公网IP，及公网IP地址会发生变化，会导致无法使用之前的公网IP访问，给访问带来麻烦，因此需要预留固定的公网IP地址，绑定给特定的虚拟机使用，使得重启后，通过固定的IP地址仍然能够访问。
对象存储	是公有云提供的一种新型的存储服务，英文是Object-based Storage。不同的云厂商对它有不同的英文缩写命名。例如阿里云把自家的对象存储服务叫做OSS，华为云叫OBS，腾讯云叫COS。与传统块存储不同的是，第一，操作对象上是对象（Object），而不是文本文件中文本；第二，存储方式通过HTTP协议上传或下载；第三，在对象存储系统里，不能直接打开/修改文件，只能先下载、修改，再上传文件。第四，不需要考虑存储的可扩展和高可用，公有云厂商会保证这一点，只有出费用，多少都能存。
PaaS	是指云服务中的平台即服务,公有云中的RDS等中间件、数据库在线服务，以及容器云。
Virtual Private Cloud, 是私有云和公有云平台用于租户隔离的网络，包括多个子网、ACL。私有云和公有云会被多个租户使用，需要解决不同租户之间的网络隔离问题，给租户提供一个安全、独立的私有网络。
全称为配置管理数据库，Configuration Management Database, 用于保存构筑企业IT及应用的资源信息、资源归属信息、应用系统应用信息、以及资源与资源关系信息，为IT系统运维、运营、管理，应用开发测试运维提供准确、一致的数据支持，比如统计分析资源投入、分组分类关联查找定位、快速定位故障等。
中间件是介于应用系统和系统软件之间的一类软件，它使用系统软件所提供的基础服务（功能），衔接网络上应用系统的各个部分或不同的应用，能够达到资源共享、功能共享的目的。目前，它并没有很严格的定义，但是普遍接受IDC的定义：中间件是一种独立的系统软件服务程序，分布式应用软件借助这种软件在不同的技术之间共享资源，中间件位于客户机服务器的操作系统之上，管理计算资源和网络通信。常见的中间件包括

Web中间件: Tomcat、Weblogic、WebSphere
消息中间件: RabbitMQ、RocketMQ
分布式协调中间件: Zookeeper

为什么要使用消息中间件？
1）系统解耦
如果某个系统产出一份核心数据，可能下游无数的其他系统都需要这份数据来实现各种业务逻辑。

此时如果你要是采取上面那种模式来设计系统架构，那么绝对你负责系统A的同学要被烦死了。

先是来一个人找他要求发送数据给一个新的系统H，系统A的同学要修改代码然后在那个代码里加入调用新系统H的流程。

一会那个系统B是个陈旧老系统要下线了，告诉系统A的同学：别给我发送数据了，接着系统A再次修改代码不再给这个系统B。

然后如果要是某个下游系统突然宕机了呢？

系统A的调用代码里是不是会抛异常？那系统A的同学会收到报警说异常了，结果他还要去care是下游哪个系统宕机了。

所以在实际的系统架构设计中，如果全部采取这种系统耦合的方式，在某些场景下绝对是不合适的，系统耦合度太严重。
2）异步调用
举个例子：你平时点个外卖，咔嚓一下子下订单然后付款了，此时账户扣款、创建订单、通知商家给你准备菜品。

接着，是不是需要找个骑手给你送餐？那这个找骑手的过程，是需要一套复杂算法来实现调度的，比较耗时。

但是其实稍微晚个几十秒完成骑手的调度都是ok的，因为实际并不需要在你支付的一瞬间立马给你找好骑手，也没那个必要。

那么我们是不是就可以把找骑手给你送餐的这个步骤从链路中抽离出去，做成异步化的，哪怕延迟个几十秒，但是只要在一定时间范围内给你找到一个骑手去送餐就可以了。

这样是不是就可以让你下订单点外卖的速度变得超快？支付成功之后，直接创建好订单、账户扣款、通知商家立马给你准备做菜就ok了，这个过程可能就几百毫秒。

然后后台异步化的耗费可能几十秒通过调度算法给你找到一个骑手去送餐，但是这个步骤不影响我们快速下订单。
3）流量削峰
如果你就部署一台机器，那会导致瞬时高峰时，一下子压垮你的系统，因为绝对无法抗住每秒几千的请求高峰。

此时我们就可以用MQ中间件来进行流量削峰。所有机器前面部署一层MQ，平时每秒几百请求大家都可以轻松接收消息。

一旦到了瞬时高峰期，一下涌入每秒几千的请求，就可以积压在MQ里面，然后那一台机器慢慢的处理和消费。

等高峰期过了，再消费一段时间，MQ里积压的数据就消费完毕了。
这个就是很典型的一个MQ的用法，用有限的机器资源承载高并发请求，如果业务场景允许异步削峰，高峰期积压一些请求在MQ里，然后高峰期过了，后台系统在一定时间内消费完毕不再积压的话，那就很适合用这种技术方案。

Redis通常将全部的数据存储在内存中。
Redis支持主从同步。数据可以从主服务器向任意数量的从服务器上同步，从服务器可以是关联其他从服务器的主服务器。这使得Redis可执行单层树复制。从盘可以有意无意的对数据进行写操作。由于完全实现了发布/订阅机制，使得从数据库在任何地方同步树时，可订阅一个频道并接收主服务器完整的消息发布记录。同步对读取操作的可扩展性和数据冗余很有帮助。
在软件架构中，发布-订阅是一种消息范式，消息的发送者（称为发布者）不会将消息直接发送给特定的接收者（称为订阅者）。而是将发布的消息分为不同的类别，无需了解哪些订阅者（如果有的话）可能存在。同样的，订阅者可以表达对一个或多个类别的兴趣，只接收感兴趣的消息，无需了解哪些发布者（如果有的话）存在。
MongoDB 是通用、基于文档的分布式数据库，帮助现代应用程序开发人员迎接云时代的到来。就数据库而言，效率是一个永不过时的话题。
丰富的 JSON 文档、

{
  "_id": "5cf0029caff5056591b0ce7d",
  "firstname": "Jane",
  "lastname": "Wu",
  "address": {
    "street": "1 Circle Rd",
    "city": "Los Angeles",
    "state": "CA",
    "zip": "90404"
  },
  "hobbies": ["surfing", "coding"]
}
强大的查询语言

> db.users.find({ "address.zip" : "90404" })
{ "_id": "5cf0029caff5056591b0ce7d", "firstname": "Jane", "lastname": "Wu", "address":{}}
{ "_id": "507f1f77bcf86cd799439011", "firstname": "Jon", "lastname": "Davis", "address":{}}
{ "_id": "5349b4ddd2781d08c09890f3", "firstname": "Jim", "lastname": "White", "address":{}}
{ "_id": "5bf142459b72e12b2b1b2cd", "firstname": "Jeff", "lastname": "Taylor", "address":{}}
{ "_id": "5cf003283b23d04a40d5f88a", "firstname": "Jerry", "lastname": "Miller", "address":{}}
{ "_id": "5bf142459b72e12b2b1b2cd", "firstname": "Jai", "lastname": "Williams", "address":{}}
{ "_id": "5cf0036deaa1742dd225ea35", "firstname": "Jess", "lastname": "Johnson", "address":{}}
{ "_id": "54495ad94c934721ede76d90", "firstname": "Jill", "lastname": "Brown", "address":{}}
{ "_id": "566eb3c704c7b31facbb0007", "firstname": "Janet", "lastname": "Jones", "address":{}}
{ "_id": "5a999cc461d36489a27f2563", "firstname": "Jan", "lastname": "Smith", "address":{}}
关系数据库的各种功能俱全，甚至更多.

session.start_transaction()
order = { line_items : [ { item : 5, quantity: 6 } ] }
db.orders.insertOne( order, session=session );
for x in order.line_items:
  db.inventory.update(
    { _id  : x.item } ,
    { $inc : { number : -1 * x.quantity } },
    session=session
  )
session.commit_transaction()

IT服务:如服务器、网络、存储。
IT管理:全生命周期管理方面，管理方面包括权限、访问控制、安全合规、流程变更管理、成本费用管理、分级分组分类、集中统一管理等
IT运维 :应用运行环境资源的监控、面向预警的性能分析、定位故障、批量变更、排除故障、IT运维管理数据同步等方面场景。
IT运营 :IT资源投入统计分析、浪费分析，持续分析优化及时回收方面场景。


身份提供商（IdP 或 IDP）是一种存储和管理用户数字身份的服务。IdP 可以比作一种来宾名单，但适用的是数字和云托管应用程序，而不是活动。IdP 可以通过用户名密码组合和其他因素来检查用户身份，也可简单地提供用户身份列表供其他服务提供商（如 SSO）检查。

IdP 不仅限于验证人类用户。从技术上讲，IdP 可以验证连接到网络或系统的任何实体，包括计算机和其他设备在内。由 IdP 存储的任何实体称为“主体”（而非“用户”）。不过，IdP 最常在云计算中用于管理用户身份。
数字身份必须在某个地方进行跟踪，尤其是对于云计算，其中用户身份决定了某个人能不能访问敏感数据。云服务需要确切知道在哪里以及如何检索和验证用户身份。

用户身份记录也需要以安全的方式存储，从而确保攻击者无法使用它们来冒充用户。云身份提供商通常会采取额外的预防措施来保护用户数据，对于并非专门用来存储身份的服务，可能会将其存储在不安全的位置，例如向互联网公开的服务器。

KVM 将 Linux 转变为 1 类（裸机恢复）虚拟机监控程序。所有虚拟机监控程序都需要一些操作系统层面的组件才能运行虚拟机，如内存管理器、进程调度程序、输入/输出（I/O）堆栈、设备驱动程序、安全管理器以及网络堆栈等。由于 KVM 是 Linux 内核的一部分，因此所有这些组件它都有。每个虚拟机都像普通的 Linux 进程一样实施，由标准的 Linux 调度程序进行调度，并且使用专门的虚拟硬件，如网卡、图形适配器、CPU、内存和磁盘等。

对象存储OSS（Object Storage Service）是提供的海量、安全、低成本、高持久的云存储服务。

OSS具有与平台无关的RESTful API接口，您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。

您可以使用阿里云提供的API、SDK接口或者OSS迁移工具轻松地将海量数据移入或移出阿里云OSS。数据存储到阿里云OSS以后，您可以选择标准存储（Standard）作为移动应用、大型网站、图片分享或热点音视频的主要存储方式，也可以选择成本更低、存储期限更长的低频访问存储（Infrequent Access）、归档存储（Archive）、冷归档存储（Cold Archive）作为不经常访问数据的存储方式。

存储类型（Storage Class）
OSS提供标准、低频访问、归档、冷归档四种存储类型，全面覆盖从热到冷的各种数据存储场景。其中标准存储类型提供高持久、高可用、高性能的对象存储服务，能够支持频繁的数据访问；低频访问存储类型适合长期保存不经常访问的数据（平均每月访问频率1到2次），存储单价低于标准类型；归档存储类型适合需要长期保存（建议半年以上）的归档数据；冷归档存储适合需要超长时间存放的极冷数据。更多信息，请参见存储类型介绍。

存储空间（Bucket）
存储空间是您用于存储对象（Object）的容器，所有的对象都必须隶属于某个存储空间。存储空间具有各种配置属性，包括地域、访问权限、存储类型等。您可以根据实际需求，创建不同类型的存储空间来存储不同的数据。

对象（Object）
对象是OSS存储数据的基本单元，也被称为OSS的文件。对象由元信息（Object Meta）、用户数据（Data）和文件名（Key）组成。对象由存储空间内部唯一的Key来标识。对象元信息是一组键值对，表示了对象的一些属性，例如最后修改时间、大小等信息，同时您也可以在元信息中存储一些自定义的信息。

地域（Region）
地域表示OSS的数据中心所在物理位置。您可以根据费用、请求来源等选择合适的地域创建Bucket。更多信息，请参见OSS已开通的地域。

访问域名（Endpoint）
Endpoint表示OSS对外服务的访问域名。OSS以HTTP RESTful API的形式对外提供服务，当访问不同地域的时候，需要不同的域名。通过内网和外网访问同一个地域所需要的域名也是不同的。更多信息，请参见各个Region对应的Endpoint。

访问密钥（AccessKey）
AccessKey简称AK，指的是访问身份验证中用到的AccessKey ID和AccessKey Secret。OSS通过使用AccessKey ID和AccessKey Secret对称加密的方法来验证某个请求的发送者身份。AccessKey ID用于标识用户；AccessKey Secret是用户用于加密签名字符串和OSS用来验证签名字符串的密钥，必须保密。关于获取AccessKey的方法，请参见创建AccessKey。
日志审计服务在继承现有日志服务所有功能外，还支持多账户下实时自动化、中心化采集云产品日志并进行审计，以及支持审计所需的存储、查询及信息汇总。日志审计服务覆盖基础（ActionTrail、容器服务Kubernetes版）、存储（OSS、NAS）、网络（SLB、API网关）、数据库（关系型数据库RDS、云原生分布式数据库PolarDB-X 1.0、云原生数据库PolarDB）、安全（WAF、DDoS防护、云防火墙、云安全中心）等产品，并支持自由对接其他生态产品或自有SOC中心。

日志审计合规:
“第二十一条 国家实行网络安全等级保护制度。网络运营者应当按照网络安全等级保护制度的要求，履行下列安全保护义务，保障网络免受干扰、破坏或者未经授权的访问，防止网络数据泄露或者被窃取、篡改：
（一）不相关，此处略去；
（二）采取防范计算机病毒和网络攻击、网络侵入等危害网络安全行为的技术措施；
（三）采取监测、记录网络运行状态、网络安全事件的技术措施，并按照规定留存相关的网络日志不少于六个月；
（四）采取数据分类、重要数据备份和加密等措施；”

按照新法规的要求，传统的运维做法及日志分析方式很难满足合规要求，传统方式存在以下弊端：
1、运维方面

需要登陆每一台服务器，使用脚本命令或程序查看，操作繁琐，容易出错；
数据是孤立分散的，无法进行关联，无法提取出其中的共性；
只能做简单搜索和统计，无法满足分析要求；
没有实时监控和报警，如程序出错日志。
2、安全方面

黑客入侵后往往会删除、修改日志，抹除入侵痕迹，导致无法通过日志分析攻击行为；
海量的 IDS/WAF 报警，根本无法辨别是否是误报。
3、存储日志性能方面

数据库的 Schema 无法适应千变万化的日志格式；
没有日志生命周期管理手段；
无法提供海量日志全文检索和字段统计功能。
总结起来就是：日志数据复杂，管理难度大，难以集中管理，因此更无法进行关联分析。那么该法规所涉及的行业和企业，尤其是需要满足网络安全等级保护第三级要求的企业，专业的日志审计产品成为其满足合规的必然选择。

那选择什么样的日志分析产品，才能满足合规要求？
（1）提供数据脱敏功能。满足网络安全法要求，对用户数据进行脱敏处理。

（2）有数据备份、还原功能。按安全法要求，数据至少备份6个月，同时能够还原指定时间范围的日志数据，以便监管部门调取。

（3）有灵活的查询搜索功能。可以对数据进行实时搜索，历史数据还原搜索，满足监管部门的查询需求。

（4）网络安全事件实时预警，防控。可以对网络设备节点故障进行实时告警及故障快速分析溯源，发现传统安全设备没有发现或阻断的安全威胁，对线上故障及威胁快速响应。

（5）符合国家标准，并通过了具备资格机构的安全认证。

漏洞扫描
网络安全漏洞扫描技术是一种基于Internet远程检测目标网络或本地主机安全性脆弱点的技术。漏洞扫描服务（Vulnerability Scan Service，简称VSS）是针对网站进行漏洞扫描的一种安全检测服务，目前提供通用漏洞检测、漏洞生命周期管理、自定义扫描多项服务。用户新建任务后，即可人工触发扫描任务，检测出网站的漏洞并给出漏洞修复建议。

通过网络安全漏洞扫描，系统管理员能够发现所维护的Web服务器的各种TCP/IP端口的分配、开放的服务、Web服务软件版本和这些服务及软件呈现在Internet上的安全漏洞。网络安全漏洞扫描技术也是采用积极的、非破坏性的办法来检验系统是否有可能被攻击崩溃。其利用了一系列的脚本模拟对系统进行攻击的行为，并对结果进行分析。这种技术通常被用来进行模拟攻击实验和安全审计。
第一阶段：发现目标主机或网络。

第二阶段：发现目标后进一步搜集目标信息，包括操作系统类型、运行的服务以及服务软件的版本等。如果目标是一个网络，还可以进一步发现该网络的拓扑结构、路由设备以及各主机的信息。

第三阶段：根据搜集到的信息判断或者进一步测试系统是否存在安全漏洞。

IDC     隶属于美国国际数据集团（IDG）。创建于1964 年，IDG是世界领先的市场研究、科技媒体、数据和营销公司。2017 年3 月22 日，中国泛海控股集团完成了对IDG 的收购, 之后主要包括 IDC和国际数据传媒公司（IDG Communications）两大业务板块。IDG Communications是世界上领先的科技媒体、数据和市场营销服务公司。
Gartner 我们成立于 1979 年，是领先的研究和咨询公司。我们已经扩展到我们的旗舰技术研究之外，为整个企业的高级领导者提供不可或缺的业务洞察力、建议和工具，以实现他们的关键任务优先级并建立未来的组织。




